//Четене на бели пиксели от картинка.

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

public class zadachi {
	
	public static int[] findPixels(BufferedImage img) {
		int whiteCount = 0;
		int width = img.getWidth();
		int height = img.getHeight();
		int allPixels = width * height;
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				int p = img.getRGB(i, j);
				// get alpha
				int a = (p >> 24) & 0xff;
				// get red
				int r = (p >> 16) & 0xff;
				// get green
				int g = (p >> 8) & 0xff;
				//get blue
			    int b = p & 0xff;
				if (r == 255 && g == 255 && b == 255) {
					whiteCount++;
				}
			}
		}
		int others = allPixels - whiteCount;
		int[] data = {allPixels, whiteCount, others};
		return data;
	}
	
	public static void writeOut(PrintStream write, String name, int[] data) {
		write.println(name);
		write.println("All pixels: " + data[0]);
		write.println("White pixels: " + data[1]);
		write.println("Other pixels: " + data[2]);
		write.println();
	}
	
	public static List<String> findPictutes(String[] files){
		List<String> pics = new ArrayList<>();
		for(String name : files) {
			if(new File(name).isFile()) {
				String extension = name.substring(name.indexOf('.'));
				if(extension.equals(".jpg") || extension.equals(".bmp") ||
						extension.equals(".jpeg") || extension.equals(".png")) {
					pics.add(name);
				}
			}
		}
		return pics;
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String path = System.getProperty("user.dir");
		File file = new File(path);
		try (PrintStream write = new PrintStream("data for pixels.txt", "windows-1251")){
			if(file.isDirectory()) {
				List<String> pictures = findPictutes(file.list());
					if(!pictures.isEmpty()) {
						for(String name : pictures) {
							BufferedImage img = ImageIO.read(new File(name));
							int[] pixels = findPixels(img);
							writeOut(write, name, pixels);
						}
					}
				}else {
				write.print("That is not directory");
			}
		} catch (FileNotFoundException e) {
			System.out.println(e);
			System.out.println("Press Enter");
			scan.nextLine();
			scan.close();
		} catch (UnsupportedEncodingException e) {
			System.out.println(e);
			System.out.println("Press Enter");
			scan.nextLine();
			scan.close();
		} catch (IOException e) {
			System.out.println(e);
			System.out.println("Press Enter");
			scan.nextLine();
			scan.close();
		}
	}
}
